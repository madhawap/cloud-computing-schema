BASE <https://w3id.org/cocoon/data/> 
PREFIX iter: <http://w3id.org/sparql-generate/iter/>
PREFIX fun: <http://w3id.org/sparql-generate/fn/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX gr: <http://purl.org/goodrelations/v1#>
PREFIX cocoon: <https://w3id.org/cocoon/v1.0.0#>

GENERATE { 
  <storage/azure/{?managed_disk}> a cocoon:NetworkStorage;
    rdfs:label ?managed_disk;
    cocoon:hasProvider cocoon:azure;
    
    GENERATE {
        <storage/azure/{?managed_disk}> gr:hasPriceSpecification [ 
            a gr:UnitPriceSpecification ; 
                gr:hasCurrency "USD"^^xsd:string; 
                gr:hasCurrencyValue ?value;
                gr:hasUnitOfMeasurement cocoon:GBPerMonth ;
                cocoon:hasRegion <region/azure/{?region}>;
        ]
    }
  	ITERATOR iter:JSONListKeys(?prices) AS ?region
    WHERE {
        BIND (xsd:float( fun:JSONPath(?prices,"$.['{?region}'].value") ) AS ?monthlyValue )
        BIND (xsd:float( ?monthlyValue/?size ) AS ?value )
    } .

    GENERATE {
        <storage/azure/{?managed_disk}>
        cocoon:hasStorageIOMax [
            a cocoon:QuantityOfThings;
                cocoon:numericValue ?iops;
                cocoon:hasUnitOfMeasurement cocoon:IOPs;
        ];
        cocoon:hasStorageSize [
            a cocoon:QuantityOfThings;
                cocoon:numericValue ?size;
                cocoon:hasUnitOfMeasurement cocoon:GB;
        ];
        cocoon:hasStorageThroughputMax [
            a cocoon:QuantityOfThings;
                cocoon:numericValue ?speed;
                cocoon:hasUnitOfMeasurement cocoon:MBPerSec;
        ];
    } WHERE {
        BIND (xsd:nonNegativeInteger( fun:JSONPath(?managed_disk_json,"$.iops") ) AS ?iops )
        BIND (xsd:nonNegativeInteger( fun:JSONPath(?managed_disk_json,"$.speed") ) AS ?speed)        
        FILTER( BOUND(?iops) )
        # either ?iops ?size ?speed are all bound or non is bound
    } .

    GENERATE {
        <storage/azure/{?managed_disk}>
            gr:hasPriceSpecification <price_specification/azure/storage_transaction/managed_disk/transactions-{?type}>;
    } WHERE {
        FILTER( ! CONTAINS(?managed_disk,"snapshot") )
        FILTER( CONTAINS(?managed_disk,"hdd") || CONTAINS(?managed_disk,"ssd") )
        BIND ( IF( CONTAINS(?managed_disk,"hdd") , "hdd" ,"ssd" ) AS ?type )        
    } .

    GENERATE {
        <storage/azure/{?managed_disk}>
            cocoon:canHaveSnapshot <storage/azure/standardssd-snapshot>;
            cocoon:canHaveSnapshot <storage/azure/standardhdd-snapshot-lrs>;
            cocoon:canHaveSnapshot <storage/azure/standardhdd-snapshot-zrs>;
            cocoon:canHaveSnapshot <storage/azure/{?premiumssd_snapshot}>;
    } WHERE {
        FILTER( !CONTAINS(?managed_disk,"snapshot") )
        FILTER( CONTAINS(?managed_disk,"premiumssd") || CONTAINS(?managed_disk,"standardssd"))
        BIND ( IF( CONTAINS(?managed_disk, "premiumssd") , "premiumssd-snapshot" , ?undefined ) AS ?premiumssd_snapshot )    
    } .
}
SOURCE <https://raw.githubusercontent.com/miranda-zhang/cloud-computing-schema/master/example/jq/azure/managed-disks.json> AS ?source
ITERATOR iter:JSONListKeys(?source) AS ?managed_disk
WHERE {
    BIND (fun:JSONPath(?source,"$.['{?managed_disk}']") AS ?managed_disk_json)
    BIND (fun:JSONPath(?managed_disk_json,"$.prices") AS ?prices)
    BIND (xsd:nonNegativeInteger( fun:JSONPath(?managed_disk_json,"$.size") ) AS ?size)
}
