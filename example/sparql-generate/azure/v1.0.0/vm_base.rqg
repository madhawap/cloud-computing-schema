BASE <https://w3id.org/cocoon/data/> 
PREFIX iter: <http://w3id.org/sparql-generate/iter/>
PREFIX fun: <http://w3id.org/sparql-generate/fn/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX gr: <http://purl.org/goodrelations/v1#>
PREFIX unit: <http://qudt.org/vocab/unit#>
PREFIX cocoon: <https://w3id.org/cocoon/v1.0#>

GENERATE { 
  <vm/azure/{?vm_key}> a cocoon:VM;
    rdfs:label ?vm_key;
    cocoon:numberOfCores ?cores;
    cocoon:hasMemory [
        a cocoon:QuantityOfThings;
            cocoon:numericValue ?memory;
            cocoon:hasUnitOfMeasurement cocoon:GB;
    ];
    cocoon:hasStorage [
        a cocoon:QuantityOfThings;
            cocoon:numericValue ?diskSize;
            cocoon:hasUnitOfMeasurement cocoon:GB;
            cocoon:ofObjectType cocoon:LocalStorage;
    ];
    gr:hasPriceSpecification <price_specification/azure/storage_transaction/vm_base>;

    GENERATE {
        <vm/azure/{?vm_key}> gr:hasPriceSpecification [ 
            a gr:UnitPriceSpecification ; 
                gr:hasCurrency "USD"^^xsd:string; 
                cocoon:hasCurrencyValue ?value; 
                cocoon:hasRegion <region/azure/{?region}>;
                gr:hasUnitOfMeasurement unit:Hour ;
        ] 
    }
    ITERATOR iter:JSONListKeys(?prices) AS ?region
    WHERE {
        BIND (xsd:float ( fun:JSONPath(?prices,"$.{?region}.value") ) AS ?value)
    }   
  	.
 
}
SOURCE <https://raw.githubusercontent.com/miranda-zhang/cloud-computing-schema/master/example/jq/azure/vm_base_offers.json> AS ?source
ITERATOR iter:JSONListKeys(?source) AS ?vm_key
WHERE {
    BIND (xsd:decimal ( fun:JSONPath(?source,"$.{?vm_key}.cores") ) AS ?cores)
    BIND (xsd:decimal ( fun:JSONPath(?source,"$.{?vm_key}.ram") ) AS ?memory)
    BIND (xsd:decimal ( fun:JSONPath(?source,"$.{?vm_key}.diskSize") ) AS ?diskSize)
    BIND (fun:JSONPath(?source,"$.{?vm_key}.prices") AS ?prices)
}
