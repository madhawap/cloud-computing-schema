BASE <https://w3id.org/cocoon/data/v1.0.1/>
PREFIX iter: <http://w3id.org/sparql-generate/iter/>
PREFIX fun: <http://w3id.org/sparql-generate/fn/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX gr: <http://purl.org/goodrelations/v1#>
PREFIX cocoon: <http://w3id.org/cocoon/v1.0.1#>
PREFIX schema: <https://schema.org/>
PREFIX unit: <http://qudt.org/1.1/vocab/unit#>

GENERATE { 
  ?iri a cocoon:NetworkStorage;
    rdfs:label ?name;
    schema:dateModified ?date;
    cocoon:hasProvider ?provider;

    GENERATE {
        ?iri gr:hasPriceSpecification [ 
            a gr:CloudServicePriceSpecification ; 
                gr:hasCurrency "USD"^^xsd:string; 
                cocoon:hasCurrencyValue ?value_normalized;
                gr:hasUnitOfMeasurement cocoon:GBPerMonth ;
                cocoon:inRegion <Region/{?provider_slug}/{?region}>;
        ]
    }
  	ITERATOR iter:JSONListKeys(?prices) AS ?region
    WHERE {
        FILTER( !CONTAINS(?managed_disk,"ultrassd") )
        BIND ( xsd:float( fun:JSONPath(?prices,"$.['{?region}'].value") ) AS ?value )
        BIND ( xsd:nonNegativeInteger( fun:JSONPath(?managed_disk_json,"$.size") ) AS ?size)
        BIND ( xsd:decimal( IF( BOUND(?size) , ?value/?size , ?value ) ) AS ?value_normalized )
    } .

    GENERATE {
        ?iri
        cocoon:hasStorageIOMax [
            a schema:TypeAndQuantityNode;
                schema:amountOfThisGood ?iops;
                schema:unitCode cocoon:IOPs;
        ];
        cocoon:hasStorageSize [
            a schema:TypeAndQuantityNode;
                schema:amountOfThisGood ?size;
                schema:unitCode cocoon:GB;
        ];
        cocoon:hasStorageThroughputMax [
            a schema:TypeAndQuantityNode;
                schema:amountOfThisGood ?speed;
                schema:unitCode unit:MegabitsPerSecond ;
        ];
    } WHERE {
        BIND (xsd:nonNegativeInteger( fun:JSONPath(?managed_disk_json,"$.iops") ) AS ?iops )
        BIND (xsd:nonNegativeInteger( fun:JSONPath(?managed_disk_json,"$.size") ) AS ?size)
        BIND (xsd:nonNegativeInteger( fun:JSONPath(?managed_disk_json,"$.speed") ) AS ?speed)        
        FILTER( BOUND(?iops) )
        # either ?iops ?size ?speed are all bound or non is bound
    } .

    GENERATE {
        ?iri
            gr:hasPriceSpecification <{?updated}/CloudStorageTransactionsPriceSpecification/{?provider_slug}/managed_disk/transactions-{?type}>;
    } WHERE {
        FILTER( ! CONTAINS(?managed_disk,"snapshot") && ! CONTAINS(?managed_disk,"ultrassd"))
        FILTER( CONTAINS(?managed_disk,"hdd") || CONTAINS(?managed_disk,"ssd") )
        BIND ( IF( CONTAINS(?managed_disk,"hdd") , "hdd" ,"ssd" ) AS ?type )        
    } .

    GENERATE {
        ?iri
            cocoon:canHaveSnapshot <{?updated}/NetworkStorage/{?provider_slug}/standardssd-snapshot>;
            cocoon:canHaveSnapshot <{?updated}/NetworkStorage/{?provider_slug}/standardhdd-snapshot-lrs>;
            cocoon:canHaveSnapshot <{?updated}/NetworkStorage/{?provider_slug}/standardhdd-snapshot-zrs>;
            cocoon:canHaveSnapshot <{?updated}/NetworkStorage/{?provider_slug}/{?premiumssd_snapshot}>;
    } WHERE {
        FILTER( !CONTAINS(?managed_disk,"snapshot") )
        FILTER( CONTAINS(?managed_disk,"premiumssd") || CONTAINS(?managed_disk,"standardssd"))
        BIND ( IF( CONTAINS(?managed_disk, "premiumssd") , "premiumssd-snapshot" , ?undefined ) AS ?premiumssd_snapshot )    
    } .

    GENERATE {
        ?iri gr:hasPriceSpecification [ 
            a gr:CloudServicePriceSpecification ;
                gr:hasCurrency "USD"^^xsd:string; 
                cocoon:hasCurrencyValue ?value;
                gr:hasUnitOfMeasurement ?unit ;
                cocoon:inRegion <Region/{?provider_slug}/{?region}>;
                rdfs:label ?label;
        ].
    }
  	ITERATOR iter:JSONListKeys(?prices) AS ?region
    WHERE {
        FILTER( CONTAINS(?managed_disk,"ultrassd") ) 
        BIND (xsd:decimal( fun:JSONPath(?prices,"$.['{?region}'].value") ) AS ?value )
        BIND (
            COALESCE(
                IF(CONTAINS(?managed_disk,"iops"), cocoon:IOPsPerHour, 1/0),
                IF(CONTAINS(?managed_disk,"stored"), cocoon:GBPerHour, 1/0),
                IF(CONTAINS(?managed_disk,"throughput"), cocoon:MegabitsPerSecondPerHour, 1/0),
                cocoon:VcpuPerHour # assume "vcpu"
            ) AS ?unit
        )
        BIND ( STRAFTER(?managed_disk,"-") AS ?label)      
    } .
}
SOURCE <https://raw.githubusercontent.com/miranda-zhang/cloud-computing-schema/master/example/jq/azure/2019-03-07/managed-disks.json> AS ?source
ITERATOR iter:JSONListKeys(?source) AS ?managed_disk
WHERE {
    BIND (fun:JSONPath(?source,"$.['{?managed_disk}']") AS ?managed_disk_json)
    BIND (fun:JSONPath(?managed_disk_json,"$.prices") AS ?prices)
    # having single point of change for the following
    BIND ( "Azure" as ?provider_slug )
    BIND ( cocoon:Azure as ?provider )
    BIND ( "2019-03-07" as ?updated) # yr-month-day
    BIND ( xsd:date(?updated) as ?date )
    BIND ( IF (CONTAINS(?managed_disk,"ultrassd"), "ultrassd", ?managed_disk) AS ?name )
    BIND ( <{?updated}/NetworkStorage/{?provider_slug}/{?name}> AS ?iri )
}
