BASE <https://w3id.org/cocoon/data/v1.0.1/>
PREFIX iter: <http://w3id.org/sparql-generate/iter/>
PREFIX fun: <http://w3id.org/sparql-generate/fn/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX gr: <http://purl.org/goodrelations/v1#>
PREFIX cocoon: <https://w3id.org/cocoon/v1.0.1#>
PREFIX schema: <https://schema.org/>

GENERATE { 
  ?iri a cocoon:InternetService;
    cocoon:hasProvider ?provider;
    schema:dateModified ?date;
    rdfs:label ?key;
    cocoon:hasDirection cocoon:Egress;
    
    GENERATE {
        ?destination_iri a cocoon:Location;
            schema:name ?destinationStr .

        ?iri cocoon:hasDestination ?destination_iri .  
    }
    ITERATOR iter:JSONPath(?destinationJson, "$.destinations[*]") AS ?destination
    WHERE {
        BIND (fun:JSONPath(?destination, "$") AS ?destinationStr) 
        BIND (<Location/{?destinationStr}> as ?destination_iri)  
    } .

    GENERATE {
        ?excludes_destination_iri a cocoon:Location;
            schema:name ?excludesDestinationStr .
        ?iri cocoon:excludesDestination ?excludes_destination_iri;     
    }
    ITERATOR iter:JSONPath(?destinationJson, "$.excludesDestinations[*]") AS ?excludesDestination
    WHERE {
        BIND (fun:JSONPath(?excludesDestination,"$") AS ?excludesDestinationStr)
        BIND (<Location/{?excludesDestinationStr}> as ?excludes_destination_iri)    
    } .

    GENERATE {        
        ?iri
        gr:hasPriceSpecification [ 
            a cocoon:CloudNetworkPriceSpecification ; 
                gr:hasCurrency "USD"^^xsd:string; 
                gr:hasCurrencyValue ?tier1;                
                cocoon:forUsageMoreThan [
                    a schema:TypeAndQuantityNode;
                    schema:unitCode cocoon:GB;
                    schema:amountOfThisGood "0"^^xsd:nonNegativeInteger;
                ];
                cocoon:forUsageLessEqual cocoon:1TB;
                gr:hasUnitOfMeasurement cocoon:GBPerMonth;            
        ];
        gr:hasPriceSpecification [ 
            a cocoon:CloudNetworkPriceSpecification ; 
                gr:hasCurrency "USD"^^xsd:string; 
                gr:hasCurrencyValue ?tier2;                
                cocoon:forUsageMoreThan cocoon:1TB;
                cocoon:forUsageLessEqual cocoon:10TB;
                gr:hasUnitOfMeasurement cocoon:GBPerMonth;            
        ];
        gr:hasPriceSpecification [ 
            a cocoon:CloudNetworkPriceSpecification ; 
                gr:hasCurrency "USD"^^xsd:string; 
                gr:hasCurrencyValue ?tier3;                
                cocoon:forUsageMoreThan cocoon:10TB;
                cocoon:forUsageLessEqual cocoon:90TB;
                gr:hasUnitOfMeasurement cocoon:GBPerMonth;            
        ];      
    } WHERE {
        FILTER( BOUND(?tiers) )
        BIND (xsd:decimal(fun:JSONPath(?tiers,".1024")) AS ?tier1)
        BIND (xsd:decimal(fun:JSONPath(?tiers,".10240")) AS ?tier2)
        BIND (xsd:decimal(fun:JSONPath(?tiers,".92160")) AS ?tier3)
    } .

    GENERATE {        
        ?iri
        gr:hasPriceSpecification [ 
            a cocoon:CloudNetworkPriceSpecification ; 
                gr:hasCurrency "USD"^^xsd:string; 
                gr:hasCurrencyValue ?us;                
                cocoon:specialRateType ?specialRateType;
                gr:hasUnitOfMeasurement cocoon:GBPerMonth;           
        ];    
    } WHERE {
        FILTER( BOUND(?us) ) 
        BIND ( IF( CONTAINS(?key,"ZONE"), "Egress between zones in the same region", "Egress between regions within the US") AS ?specialRateType) 
    } .
}
SOURCE <https://raw.githubusercontent.com/miranda-zhang/cloud-computing-schema/master/example/jq/gcloud/v1.62/internet_destination.json> AS ?destinations
SOURCE <https://raw.githubusercontent.com/miranda-zhang/cloud-computing-schema/master/example/jq/gcloud/v1.62/internet.json> AS ?internet
# both source should have the same keys in data
ITERATOR iter:JSONListKeys(?internet) AS ?key
WHERE {
    BIND(fun:JSONPath(?internet, '$.{?key}' ) AS ?gcloudInternet)
    BIND(fun:JSONPath(?destinations, '$.{?key}' ) AS ?destinationJson)
    BIND (fun:JSONPath(?gcloudInternet,"$.tiers") AS ?tiers)
    BIND (xsd:decimal(fun:JSONPath(?gcloudInternet,"$.us")) AS ?us)
    # having signle point of change for the following
    BIND ( "Gcloud" as ?provider_slug )
    BIND ( cocoon:Gcloud as ?provider )
    BIND ( "2019-02-12" as ?release_date) # yr-month-day
    BIND ( <{?release_date}/InternetService/{?provider_slug}/{?key}> as ?iri )
    BIND ( xsd:date(?release_date) as ?date )
}
